// Generated file - do not edit!
// Source: html/portal.html
#pragma once
#include <pgmspace.h>
static const char PORTAL_HTML[] PROGMEM = "<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
"    <title>Configure DeskHog</title>\n"
"    <style>\n"
":root {\n"
"    background-color: #E5E7DF;\n"
"    --border-color: #DCDED4;\n"
"    --container-color: #F3F4F0;\n"
"    --button-border: #CCCCCC;\n"
"    --button-border-hover: #AAA;\n"
"    --radius: 8px;\n"
"    --input-color: #FFF;\n"
"    --panel-color: #FFF;\n"
"    --label-color: #a0a0a0;\n"
"    --button-shadow: #E1DDDD;\n"
"    --tip-color: #343434;\n"
"    --link-color: rgb(245 78 0);\n"
"    --default-font: system-ui, -apple-system, sans-serif; \n"
"    font-family: var(--default-font);\n"
"\n"
"}\n"
"\n"
"body { \n"
"    margin: 0; \n"
"    padding: 1rem; \n"
"    background-color: var(--container-color); \n"
"    color: #333; \n"
"    max-width: 70ch;\n"
"    margin-left: auto;\n"
"    margin-right: auto;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
"a {\n"
"    color: var(--link-color);\n"
"    font-weight: 600;\n"
"    text-decoration: none;\n"
"}\n"
"\n"
".tip {\n"
"    font-weight: 400;\n"
"    font-size: 0.9rem;\n"
"    color: var(--tip-color);\n"
"    margin-bottom: 1.5rem;\n"
"}\n"
"\n"
".config-section {\n"
"    background-color: var(--panel-color);\n"
"    padding: 1rem;\n"
"    border-radius: var(--radius);\n"
"    margin-bottom: 1rem;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
"\n"
"\n"
"h1, h2 { color: #000000;\n"
"}\n"
"\n"
"h1 {\n"
"    font-weight: 700;\n"
"    font-size: 1.5rem;\n"
"\n"
"}\n"
"\n"
"h2 {\n"
"    font-weight: 600;\n"
"    font-size: 1.1rem;\n"
"    margin-bottom: 0.5rem;\n"
"}\n"
"\n"
".form-group { margin-bottom: 15px; }\n"
"label { \n"
"    display: block; \n"
"    margin-bottom: 0.5rem; \n"
"    font-weight: 600;\n"
"}\n"
"input[type='text'], input[type='password'] { \n"
"    width: 100%; \n"
"    padding: 8px; \n"
"    border: 1px solid #ddd; \n"
"    border-radius: 8px; \n"
"    box-sizing: border-box; \n"
"    font-size: 1rem;\n"
"}\n"
".button-container { \n"
"    margin-top: 15px; \n"
"    text-align: center; \n"
"}\n"
"button, select { \n"
"    display: inline-block; \n"
"    width: 100%;\n"
"    font-size: 16px;\n"
"    font-weight: 600;\n"
"    height: 40px;\n"
"    text-decoration: none; \n"
"    background-color: var(--input-color);\n"
"    border: 1px solid var(--button-border);\n"
"    border-radius: var(--radius); \n"
"    cursor: pointer; \n"
"    padding: 0 16px;\n"
"\n"
"    box-shadow: 0 4px 0 0 var(--button-shadow),\n"
"                0 5px 0 0 var(--button-border);\n"
"    color: inherit;\n"
"    -webkit-tap-highlight-color: transparent;\n"
"}\n"
"\n"
"input, select {\n"
"    height: 40px;\n"
"}\n"
"\n"
"button:active {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
"ul {\n"
"    list-style: none;\n"
"    padding: 0;\n"
"    margin: 0;\n"
"}\n"
"\n"
"li {\n"
"    margin-bottom: 1rem;\n"
"}\n"
"\n"
"li:last-child {\n"
"    margin-bottom: 0;\n"
"}\n"
"\n"
"footer { \n"
"    text-align: center; \n"
"    margin-top: 4rem; \n"
"    color: #777; \n"
"    font-size: 0.8em; \n"
"}\n"
".network-list {\n"
"    max-height: 200px;\n"
"    overflow-y: auto;\n"
"    border: 1px solid #ddd;\n"
"    border-radius: 4px;\n"
"    margin-bottom: 15px;\n"
"}\n"
".network-item {\n"
"    padding: 8px 15px;\n"
"    border-bottom: 1px solid #eee;\n"
"    cursor: pointer;\n"
"}\n"
".network-item:hover {\n"
"    background-color: #f5f5f5;\n"
"}\n"
".network-item.selected {\n"
"    background-color: #e0f0ff;\n"
"}\n"
"\n"
".lock-icon {\n"
"    margin-left: 5px;\n"
"}\n"
".success-icon {\n"
"    color: #28a745;\n"
"    font-size: 48px;\n"
"    text-align: center;\n"
"    margin: 20px 0;\n"
"}\n"
".progress {\n"
"    height: 6px;\n"
"    background-color: #e9ecef;\n"
"    border-radius: 2px;\n"
"    margin: 20px 0;\n"
"    overflow: hidden;\n"
"}\n"
".progress-bar {\n"
"    height: 100%;\n"
"    background-color: #cc7000;\n"
"    width: 0%;\n"
"    transition: width 10s linear;\n"
"}\n"
".hidden {\n"
"    display: none;\n"
"}\n"
"\n"
"select {\n"
"    -webkit-appearance: none;\n"
"    -moz-appearance: none;\n"
"    appearance: none;\n"
"    background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n"
"    background-repeat: no-repeat;\n"
"    background-position: right 0.7rem top 50%;\n"
"    background-size: 1rem auto;\n"
"    padding-right: 2rem;\n"
"    background-color: var(--input-color);\n"
"    font-family: var(--default-font);\n"
"}\n"
"\n"
"select::-ms-expand {\n"
"    display: none;\n"
"}\n"
"\n"
"/* Status message styling (used by global-action-status) */\n"
".status-message {\n"
"    padding: 0.75em;\n"
"    margin-bottom: 1em;\n"
"    border-radius: 4px;\n"
"    text-align: center;\n"
"    font-family: monospace; /* Added for fixed-width font */\n"
"}\n"
"\n"
"#firmware-update-section {\n"
"    font-family: monospace;\n"
"}\n"
"\n"
".status-message.info {\n"
"    background-color: #e7f3fe; /* Light blue for info */\n"
"    border: 1px solid #d0eaff;\n"
"    color: #31708f;\n"
"}\n"
"\n"
".status-message.success {\n"
"    background-color: #d4edda; /* Light green for success */\n"
"    border: 1px solid #c3e6cb;\n"
"    color: #155724;\n"
"}\n"
"\n"
".status-message.error {\n"
"    background-color: #f8d7da; /* Light red for error */\n"
"    border: 1px solid #f5c6cb;\n"
"    color: #721c24;\n"
"}\n"
"\n"
"/* Release notes box specific styling */\n"
"#release-notes {\n"
"    /* Assuming .release-notes-box class already exists or you style #release-notes directly */\n"
"    /* If .release-notes-box is the primary selector for layout, add font-family there */\n"
"    /* For direct styling of the <pre> tag by ID: */\n"
"    font-family: monospace; /* Added for fixed-width font */\n"
"    white-space: pre-wrap;  /* Ensures long lines wrap */\n"
"    word-wrap: break-word;  /* Breaks long words if necessary */\n"
"    background-color: #f8f9fa; /* Light background for the box */\n"
"    border: 1px solid #dee2e6;   /* Border for the box */\n"
"    padding: 10px;              /* Padding inside the box */\n"
"    max-height: 200px;          /* Max height with scroll if content exceeds */\n"
"    overflow-y: auto;           /* Enable vertical scroll */\n"
"    border-radius: var(--radius); /* Consistent border radius */\n"
"}\n"
"\n"
"/* Available cards list styling */\n"
".available-card-item {\n"
"    border: 1px solid var(--border-color);\n"
"    border-radius: var(--radius);\n"
"    padding: 1rem;\n"
"    margin-bottom: 0.5rem;\n"
"    background-color: var(--input-color);\n"
"    display: flex;\n"
"    justify-content: space-between;\n"
"    align-items: center;\n"
"}\n"
"\n"
".available-card-info {\n"
"    flex: 1;\n"
"}\n"
"\n"
".available-card-name {\n"
"    font-weight: 600;\n"
"    margin-bottom: 0.25rem;\n"
"}\n"
"\n"
".available-card-description {\n"
"    font-size: 0.9rem;\n"
"    color: var(--label-color);\n"
"    margin-bottom: 0.25rem;\n"
"}\n"
"\n"
".available-card-status {\n"
"    font-size: 0.8rem;\n"
"    color: var(--label-color);\n"
"    font-style: italic;\n"
"}\n"
"\n"
".available-card-actions {\n"
"    display: flex;\n"
"    flex-direction: column;\n"
"    gap: 0.5rem;\n"
"    min-width: 120px;\n"
"}\n"
"\n"
".add-card-btn {\n"
"    background-color: var(--input-color);\n"
"    border: 1px solid var(--button-border);\n"
"    padding: 0.5rem 1rem;\n"
"    border-radius: var(--radius);\n"
"    cursor: pointer;\n"
"    font-weight: 600;\n"
"    width: 100%;\n"
"    box-shadow: 0 4px 0 0 var(--button-shadow),\n"
"                0 5px 0 0 var(--button-border);\n"
"}\n"
"\n"
".add-card-btn:hover {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
".add-card-btn:active {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
".delete-card-btn {\n"
"    background-color: var(--input-color);\n"
"    color: #dc3545;\n"
"    border: 1px solid var(--button-border);\n"
"    padding: 5px 10px;\n"
"    border-radius: var(--radius);\n"
"    cursor: pointer;\n"
"    font-weight: 600;\n"
"    box-shadow: 0 2px 0 0 var(--button-shadow),\n"
"                0 3px 0 0 var(--button-border);\n"
"}\n"
"\n"
".delete-card-btn:hover {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
".delete-card-btn:active {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
".config-input {\n"
"    padding: 0.25rem 0.5rem;\n"
"    border: 1px solid var(--border-color);\n"
"    border-radius: 4px;\n"
"    font-size: 0.9rem;\n"
"    width: 100%;\n"
"    box-sizing: border-box;\n"
"}\n"
"\n"
"/* Drag and drop styling for configured cards */\n"
".card-item {\n"
"    border: 1px solid var(--border-color);\n"
"    padding: 10px;\n"
"    margin: 5px 0;\n"
"    border-radius: 5px;\n"
"    background: #f9f9f9;\n"
"    cursor: move;\n"
"    transition: all 0.2s ease;\n"
"}\n"
"\n"
".card-item:hover {\n"
"    background: #f0f0f0;\n"
"    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n"
"}\n"
"\n"
".card-item.dragging {\n"
"    opacity: 0.5;\n"
"    transform: rotate(2deg);\n"
"}\n"
"\n"
".card-item.drag-over {\n"
"    border-color: #007bff;\n"
"    background: #e3f2fd;\n"
"    border-style: dashed;\n"
"    border-width: 2px;\n"
"}\n"
"\n"
".drag-handle {\n"
"    color: var(--label-color);\n"
"    cursor: grab;\n"
"    font-size: 1.2rem;\n"
"    margin-right: 0.5rem;\n"
"    user-select: none;\n"
"}\n"
"\n"
".drag-handle:active {\n"
"    cursor: grabbing;\n"
"}\n"
"</style>\n"
"    <script>\n"
"function showScreen(screenId) {\n"
"    const screens = ['config-screen'];\n"
"    screens.forEach(id => {\n"
"        const el = document.getElementById(id);\n"
"        if (el) el.classList.add('hidden');\n"
"    });\n"
"    const screenToShow = document.getElementById(screenId);\n"
"    if (screenToShow) screenToShow.classList.remove('hidden');\n"
"    \n"
"    let title = \"DeskHog configuration\";\n"
"    document.getElementById('page-title').textContent = title;\n"
"}\n"
"\n"
"// Handle WiFi form submission\n"
"function saveWifiConfig() {\n"
"    const form = document.getElementById('wifi-form');\n"
"    const formData = new FormData(form);\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    \n"
"    fetch('/api/actions/save-wifi', { \n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') {\n"
"            console.log(\"Save WiFi action successfully queued.\", data.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Save WiFi initiated. Device will attempt to connect.\";\n"
"                globalActionStatusEl.className = 'status-message info';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.textContent === (data.message || \"Save WiFi initiated. Device will attempt to connect.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000);\n"
"            }\n"
"        } else {\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate WiFi save.\";\n"
"            console.error(\"Failed to initiate WiFi save:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000);\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        console.error(\"Communication error trying to save WiFi.\");\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error trying to save WiFi.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000);\n"
"        }\n"
"    });\n"
"    \n"
"    return false; \n"
"}\n"
"\n"
"// Handle device config form submission\n"
"function saveDeviceConfig() {\n"
"    const form = document.getElementById('device-form');\n"
"    const formData = new FormData(form);\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    \n"
"    fetch('/api/actions/save-device-config', { \n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') {\n"
"            console.log(\"Save device config action successfully queued.\", data.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Device configuration save initiated.\";\n"
"                globalActionStatusEl.className = 'status-message info';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                     if (globalActionStatusEl.textContent === (data.message || \"Device configuration save initiated.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000);\n"
"            }\n"
"        } else {\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate device config save.\";\n"
"            console.error(\"Failed to initiate device config save:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000);\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        console.error(\"Communication error saving device config.\");\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error saving device config.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000);\n"
"        }\n"
"    });\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"// Toggle API key visibility\n"
"function toggleApiKeyVisibility() {\n"
"    const apiKeyInput = document.getElementById('apiKey');\n"
"    apiKeyInput.type = apiKeyInput.type === 'password' ? 'text' : 'password';\n"
"}\n"
"\n"
"// Global variables for card management\n"
"let availableCardTypes = [];\n"
"let configuredCards = [];\n"
"\n"
"// Load card definitions from the device\n"
"async function loadCardDefinitions() {\n"
"    try {\n"
"        const response = await fetch('/api/cards/definitions');\n"
"        if (!response.ok) {\n"
"            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n"
"        }\n"
"        const definitions = await response.json();\n"
"        availableCardTypes = definitions;\n"
"        updateAvailableCardsList();\n"
"        console.log('Loaded', definitions.length, 'card definitions');\n"
"    } catch (error) {\n"
"        console.error('Failed to load card definitions:', error);\n"
"        // Set empty array as fallback\n"
"        availableCardTypes = [];\n"
"    }\n"
"}\n"
"\n"
"// Load configured cards from the device\n"
"async function loadConfiguredCards() {\n"
"    try {\n"
"        const response = await fetch('/api/cards/configured');\n"
"        if (!response.ok) {\n"
"            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n"
"        }\n"
"        const cards = await response.json();\n"
"        configuredCards = cards;\n"
"        updateCardsListUI();\n"
"        updateAvailableCardsList(); // Update availability status\n"
"        console.log('Loaded', cards.length, 'configured cards');\n"
"    } catch (error) {\n"
"        console.error('Failed to load configured cards:', error);\n"
"        // Set empty array as fallback\n"
"        configuredCards = [];\n"
"        updateCardsListUI();\n"
"        updateAvailableCardsList(); // Update availability status\n"
"    }\n"
"}\n"
"\n"
"// Update the available cards list\n"
"function updateAvailableCardsList() {\n"
"    const container = document.getElementById('available-cards-list');\n"
"    if (!container) return;\n"
"    \n"
"    // Handle empty state\n"
"    if (!availableCardTypes || availableCardTypes.length === 0) {\n"
"        if (container.innerHTML !== '<p>No card types available</p>') {\n"
"            container.innerHTML = '<p>No card types available</p>';\n"
"        }\n"
"        return;\n"
"    }\n"
"    \n"
"    // Update existing items or create new ones\n"
"    availableCardTypes.forEach(cardDef => {\n"
"        let cardItem = container.querySelector(`[data-card-type=\"${cardDef.id}\"]`);\n"
"        \n"
"        // Check if this card type is already configured and if it allows multiple instances\n"
"        const existingCount = configuredCards.filter(card => card.type === cardDef.id).length;\n"
"        const canAdd = cardDef.allowMultiple || existingCount === 0;\n"
"        \n"
"        let statusText = '';\n"
"        if (!cardDef.allowMultiple && existingCount > 0) {\n"
"            statusText = 'Already added (single instance)';\n"
"        } else if (existingCount > 0) {\n"
"            statusText = `${existingCount} instance${existingCount > 1 ? 's' : ''} configured`;\n"
"        }\n"
"        \n"
"        if (!cardItem) {\n"
"            // Create new item only if it doesn't exist\n"
"            cardItem = document.createElement('div');\n"
"            cardItem.className = 'available-card-item';\n"
"            cardItem.setAttribute('data-card-type', cardDef.id);\n"
"            \n"
"            cardItem.innerHTML = `\n"
"                <div class=\"available-card-info\">\n"
"                    <div class=\"available-card-name\">${cardDef.name}</div>\n"
"                    <div class=\"available-card-description\">${cardDef.description || cardDef.uiDescription || ''}</div>\n"
"                    <div class=\"available-card-status\"></div>\n"
"                </div>\n"
"                <div class=\"available-card-actions\">\n"
"                    ${cardDef.needsConfigInput ? `\n"
"                        <input type=\"text\" class=\"config-input\" placeholder=\"${cardDef.configInputLabel}\" id=\"config-${cardDef.id}\">\n"
"                    ` : ''}\n"
"                    <button class=\"add-card-btn\" onclick=\"addCardFromList('${cardDef.id}')\" ${!canAdd ? 'style=\"display:none\"' : ''}>\n"
"                        + Add card\n"
"                    </button>\n"
"                </div>\n"
"            `;\n"
"            \n"
"            container.appendChild(cardItem);\n"
"        } else {\n"
"            // Update existing item without destroying input values\n"
"            const statusEl = cardItem.querySelector('.available-card-status');\n"
"            if (statusEl) {\n"
"                statusEl.textContent = statusText;\n"
"            }\n"
"            \n"
"            const addBtn = cardItem.querySelector('.add-card-btn');\n"
"            if (addBtn) {\n"
"                addBtn.style.display = canAdd ? '' : 'none';\n"
"            }\n"
"        }\n"
"    });\n"
"    \n"
"    // Remove any cards that no longer exist in availableCardTypes\n"
"    const existingItems = container.querySelectorAll('[data-card-type]');\n"
"    existingItems.forEach(item => {\n"
"        const cardType = item.getAttribute('data-card-type');\n"
"        if (!availableCardTypes.find(def => def.id === cardType)) {\n"
"            item.remove();\n"
"        }\n"
"    });\n"
"}\n"
"\n"
"// Save card configuration to device\n"
"async function saveCardConfiguration() {\n"
"    try {\n"
"        const response = await fetch('/api/cards/configured', {\n"
"            method: 'POST',\n"
"            headers: {\n"
"                'Content-Type': 'application/json'\n"
"            },\n"
"            body: JSON.stringify(configuredCards)\n"
"        });\n"
"        \n"
"        const result = await response.json();\n"
"        if (result.success) {\n"
"            console.log('Card configuration saved successfully');\n"
"            // Reload to reflect changes\n"
"            await loadConfiguredCards();\n"
"        } else {\n"
"            console.error('Failed to save card configuration:', result.message);\n"
"        }\n"
"    } catch (error) {\n"
"        console.error('Error saving card configuration:', error);\n"
"    }\n"
"}\n"
"\n"
"// Add new card from the list interface\n"
"function addCardFromList(cardTypeId) {\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    \n"
"    // Find the card definition\n"
"    const cardDef = availableCardTypes.find(def => def.id === cardTypeId);\n"
"    if (!cardDef) {\n"
"        console.error('Card definition not found for type:', cardTypeId);\n"
"        return;\n"
"    }\n"
"    \n"
"    // Get config value if needed\n"
"    let cardConfig = '';\n"
"    if (cardDef.needsConfigInput) {\n"
"        const configInput = document.getElementById(`config-${cardTypeId}`);\n"
"        if (!configInput || !configInput.value.trim()) {\n"
"            // Show error\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = `Please enter a value for ${cardDef.configInputLabel}`;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }, 3000);\n"
"            }\n"
"            return;\n"
"        }\n"
"        cardConfig = configInput.value.trim();\n"
"    }\n"
"    \n"
"    // Create new card configuration\n"
"    const newCard = {\n"
"        type: cardTypeId,\n"
"        config: cardConfig,\n"
"        name: cardDef.name,\n"
"        order: configuredCards.length // Add to end\n"
"    };\n"
"    \n"
"    // Add to current configuration\n"
"    configuredCards.push(newCard);\n"
"    \n"
"    // Save to device\n"
"    saveCardConfiguration();\n"
"    \n"
"    // Clear the config input if it exists\n"
"    if (cardDef.needsConfigInput) {\n"
"        const configInput = document.getElementById(`config-${cardTypeId}`);\n"
"        if (configInput) {\n"
"            configInput.value = '';\n"
"        }\n"
"    }\n"
"    \n"
"    // Update the available cards list to reflect new state\n"
"    updateAvailableCardsList();\n"
"    \n"
"    if (globalActionStatusEl) {\n"
"        globalActionStatusEl.textContent = \"Card added successfully\";\n"
"        globalActionStatusEl.className = 'status-message info';\n"
"        globalActionStatusEl.style.display = 'block';\n"
"        setTimeout(() => {\n"
"            globalActionStatusEl.style.display = 'none';\n"
"            globalActionStatusEl.textContent = '';\n"
"            globalActionStatusEl.className = 'status-message';\n"
"        }, 3000);\n"
"    }\n"
"}\n"
"\n"
"// Update the cards list UI with drag-and-drop functionality\n"
"function updateCardsListUI() {\n"
"    const container = document.getElementById('cards-list');\n"
"    if (!container) return;\n"
"    \n"
"    container.innerHTML = '';\n"
"    \n"
"    if (!configuredCards || configuredCards.length === 0) {\n"
"        container.innerHTML = '<p>No cards configured</p>';\n"
"        return;\n"
"    }\n"
"    \n"
"    // Sort cards by order\n"
"    const sortedCards = [...configuredCards].sort((a, b) => a.order - b.order);\n"
"    \n"
"    const list = document.createElement('div');\n"
"    list.className = 'cards-list';\n"
"    \n"
"    sortedCards.forEach((card, index) => {\n"
"        const item = document.createElement('div');\n"
"        item.className = 'card-item';\n"
"        item.draggable = true;\n"
"        item.dataset.cardIndex = index;\n"
"        \n"
"        item.innerHTML = `\n"
"            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n"
"                <div style=\"display: flex; align-items: center;\">\n"
"                    <span class=\"drag-handle\">⋮⋮</span>\n"
"                    <div>\n"
"                        <strong>${card.name}</strong>\n"
"                        <br>\n"
"                        <small>Type: ${card.type}${card.config ? ` • Config: ${card.config}` : ''}</small>\n"
"                    </div>\n"
"                </div>\n"
"                <div>\n"
"                    <button onclick=\"deleteCard(${index})\" class=\"delete-card-btn\">Delete</button>\n"
"                </div>\n"
"            </div>\n"
"        `;\n"
"        \n"
"        // Add drag event listeners\n"
"        item.addEventListener('dragstart', handleDragStart);\n"
"        item.addEventListener('dragover', handleDragOver);\n"
"        item.addEventListener('drop', handleDrop);\n"
"        item.addEventListener('dragend', handleDragEnd);\n"
"        item.addEventListener('dragenter', handleDragEnter);\n"
"        item.addEventListener('dragleave', handleDragLeave);\n"
"        \n"
"        list.appendChild(item);\n"
"    });\n"
"    \n"
"    container.appendChild(list);\n"
"}\n"
"\n"
"// Drag and drop variables\n"
"let draggedElement = null;\n"
"let draggedIndex = null;\n"
"\n"
"// Drag event handlers\n"
"function handleDragStart(e) {\n"
"    draggedElement = e.target;\n"
"    draggedIndex = parseInt(e.target.dataset.cardIndex);\n"
"    e.target.classList.add('dragging');\n"
"    e.dataTransfer.effectAllowed = 'move';\n"
"    e.dataTransfer.setData('text/html', e.target.outerHTML);\n"
"}\n"
"\n"
"function handleDragOver(e) {\n"
"    if (e.preventDefault) {\n"
"        e.preventDefault();\n"
"    }\n"
"    e.dataTransfer.dropEffect = 'move';\n"
"    return false;\n"
"}\n"
"\n"
"function handleDragEnter(e) {\n"
"    if (e.target !== draggedElement) {\n"
"        e.target.classList.add('drag-over');\n"
"    }\n"
"}\n"
"\n"
"function handleDragLeave(e) {\n"
"    e.target.classList.remove('drag-over');\n"
"}\n"
"\n"
"function handleDrop(e) {\n"
"    if (e.stopPropagation) {\n"
"        e.stopPropagation();\n"
"    }\n"
"    \n"
"    const dropIndex = parseInt(e.target.closest('.card-item').dataset.cardIndex);\n"
"    \n"
"    if (draggedIndex !== dropIndex) {\n"
"        // Reorder the cards\n"
"        const sortedCards = [...configuredCards].sort((a, b) => a.order - b.order);\n"
"        const draggedCard = sortedCards[draggedIndex];\n"
"        \n"
"        // Remove the dragged card from its current position\n"
"        sortedCards.splice(draggedIndex, 1);\n"
"        \n"
"        // Insert it at the new position\n"
"        sortedCards.splice(dropIndex, 0, draggedCard);\n"
"        \n"
"        // Update order values\n"
"        sortedCards.forEach((card, index) => {\n"
"            card.order = index;\n"
"        });\n"
"        \n"
"        // Update the global array\n"
"        configuredCards = sortedCards;\n"
"        \n"
"        // Save and update UI\n"
"        saveCardConfiguration();\n"
"    }\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"function handleDragEnd(e) {\n"
"    e.target.classList.remove('dragging');\n"
"    \n"
"    // Clean up drag-over classes from all items\n"
"    document.querySelectorAll('.card-item').forEach(item => {\n"
"        item.classList.remove('drag-over');\n"
"    });\n"
"    \n"
"    draggedElement = null;\n"
"    draggedIndex = null;\n"
"}\n"
"\n"
"// Delete a card\n"
"function deleteCard(index) {\n"
"    const sortedCards = [...configuredCards].sort((a, b) => a.order - b.order);\n"
"    const cardToDelete = sortedCards[index];\n"
"    \n"
"    if (!confirm(`Are you sure you want to delete \"${cardToDelete.name}\"?`)) {\n"
"        return;\n"
"    }\n"
"    \n"
"    // Remove the card from the array\n"
"    configuredCards = configuredCards.filter(card => \n"
"        card.type !== cardToDelete.type || \n"
"        card.config !== cardToDelete.config || \n"
"        card.order !== cardToDelete.order\n"
"    );\n"
"    \n"
"    // Reorder remaining cards\n"
"    configuredCards.forEach((card, idx) => {\n"
"        card.order = idx;\n"
"    });\n"
"    \n"
"    // Save and update UI\n"
"    saveCardConfiguration();\n"
"    \n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    if (globalActionStatusEl) {\n"
"        globalActionStatusEl.textContent = \"Card deleted successfully\";\n"
"        globalActionStatusEl.className = 'status-message info';\n"
"        globalActionStatusEl.style.display = 'block';\n"
"        setTimeout(() => {\n"
"            globalActionStatusEl.style.display = 'none';\n"
"            globalActionStatusEl.textContent = '';\n"
"            globalActionStatusEl.className = 'status-message';\n"
"        }, 3000);\n"
"    }\n"
"}\n"
"\n"
"\n"
"// Refresh network list - UI update part will be in pollApiStatus\n"
"function _updateNetworksListUI(networks) {\n"
"    const select = document.getElementById('ssid');\n"
"    const currentVal = select.value;\n"
"    select.innerHTML = '<option value=\"\">Select a network</option>';\n"
"    \n"
"    if (!networks || networks.length === 0) {\n"
"        select.innerHTML += '<option disabled>No networks found</option>';\n"
"        return;\n"
"    }\n"
"    \n"
"    networks.forEach(network => {\n"
"        const option = document.createElement('option');\n"
"        option.value = network.ssid;\n"
"        \n"
"        let label = network.ssid;\n"
"        if (network.rssi >= -50) label += ' (Excellent)';\n"
"        else if (network.rssi >= -60) label += ' (Good)';\n"
"        else if (network.rssi >= -70) label += ' (Fair)';\n"
"        else label += ' (Poor)';\n"
"        if (network.encrypted) label += ' 🔒';\n"
"        \n"
"        option.textContent = label;\n"
"        if (network.ssid === currentVal) {\n"
"            option.selected = true;\n"
"        }\n"
"        select.appendChild(option);\n"
"    });\n"
"}\n"
"\n"
"function requestScanNetworks() {\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    fetch('/api/actions/start-wifi-scan', { method: 'POST' })\n"
"        .then(response => {\n"
"            if (!response.ok) {\n"
"                return response.json().then(errData => {\n"
"                    throw new Error(errData.message || `HTTP error ${response.status}`);\n"
"                }).catch(() => {\n"
"                    throw new Error(`HTTP error ${response.status}`);\n"
"                });\n"
"            }\n"
"            return response.json();\n"
"        })\n"
"        .then(data => {\n"
"            if (data.status === 'queued') {\n"
"                console.log(\"WiFi scan action successfully queued:\", data.message);\n"
"                const ssidSelect = document.getElementById('ssid');\n"
"                if (globalActionStatusEl) {\n"
"                    globalActionStatusEl.textContent = data.message || \"WiFi scan requested. List will update shortly.\";\n"
"                    globalActionStatusEl.className = 'status-message info';\n"
"                    globalActionStatusEl.style.display = 'block';\n"
"                    setTimeout(() => {\n"
"                        if (globalActionStatusEl.textContent === (data.message || \"WiFi scan requested. List will update shortly.\")) {\n"
"                            globalActionStatusEl.style.display = 'none';\n"
"                            globalActionStatusEl.textContent = '';\n"
"                            globalActionStatusEl.className = 'status-message';\n"
"                        }\n"
"                    }, 5000);\n"
"                }\n"
"                if (ssidSelect && (ssidSelect.options.length <= 1 || ssidSelect.firstChild.value === \"\")) {\n"
"                     ssidSelect.innerHTML = '<option>Scan requested, list updating...</option>';\n"
"                }\n"
"\n"
"            } else {\n"
"                const errorMessage = `Failed to queue WiFi scan: ${data.message || 'Unexpected server response.'}`;\n"
"                console.error(errorMessage);\n"
"                if (globalActionStatusEl) {\n"
"                    globalActionStatusEl.textContent = errorMessage;\n"
"                    globalActionStatusEl.className = 'status-message error';\n"
"                    globalActionStatusEl.style.display = 'block';\n"
"                }\n"
"                document.getElementById('ssid').innerHTML = '<option>Scan request issue.</option>';\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting network scan:', error.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = `Error requesting scan: ${error.message}`;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"            }\n"
"            document.getElementById('ssid').innerHTML = '<option value=\"\">Error starting scan</option>';\n"
"        });\n"
"}\n"
"\n"
"// Main function to poll /api/status and update UI\n"
"let lastProcessedAction = null;\n"
"let lastProcessedActionMessage = \"\";\n"
"let initialDeviceConfigLoaded = false;\n"
"let lastWifiUpdateTime = 0;\n"
"const WIFI_UPDATE_INTERVAL = 10000; // Update WiFi list every 10 seconds\n"
"\n"
"function pollApiStatus() {\n"
"    fetch('/api/status')\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            const portalStatus = data.portal;\n"
"            const globalActionStatusEl = document.getElementById('global-action-status');\n"
"\n"
"            if (portalStatus && globalActionStatusEl) {\n"
"                if (portalStatus.action_in_progress && portalStatus.action_in_progress !== 'NONE') {\n"
"                    globalActionStatusEl.textContent = `Processing: ${portalStatus.action_in_progress.replace(/_/g, ' ').toLowerCase()}...`;\n"
"                    globalActionStatusEl.className = 'status-message info'; \n"
"                    globalActionStatusEl.style.display = 'block';\n"
"                    lastProcessedAction = null; \n"
"                }\n"
"                else if (portalStatus.last_action_completed && portalStatus.last_action_completed !== 'NONE') {\n"
"                    const completedActionKey = portalStatus.last_action_completed + '-' + (portalStatus.last_action_status || 'UNKNOWN') + '-' + (portalStatus.last_action_message || 'NO_MSG');\n"
"\n"
"                    if (lastProcessedAction !== completedActionKey) {\n"
"                        console.log(`Action completed: ${portalStatus.last_action_completed}, Status: ${portalStatus.last_action_status}, Msg: ${portalStatus.last_action_message}`);\n"
"\n"
"                        if (portalStatus.last_action_status === 'SUCCESS') {\n"
"                            let successMsg = portalStatus.last_action_message || `${portalStatus.last_action_completed.replace(/_/g, ' ')} successful.`;\n"
"                            if (!portalStatus.last_action_message) {\n"
"                                switch (portalStatus.last_action_completed) {\n"
"                                    case 'SAVE_WIFI': \n"
"                                        successMsg = 'WiFi configuration saved. Device will attempt to connect.'; \n"
"                                        if (data.wifi && data.wifi.is_connected) {\n"
"                                            successMsg += ` Connected to ${data.wifi.connected_ssid}.`;\n"
"                                        } else if (data.wifi) {\n"
"                                            successMsg += ' Checking connection...';\n"
"                                        }\n"
"                                        break;\n"
"                                    case 'SAVE_DEVICE_CONFIG': successMsg = 'Device configuration saved.'; break;\n"
"                                    case 'SAVE_INSIGHT': successMsg = 'New insight saved.'; break;\n"
"                                    case 'DELETE_INSIGHT': successMsg = 'Insight deleted.'; break;\n"
"                                }\n"
"                            }\n"
"                            globalActionStatusEl.textContent = successMsg;\n"
"                            globalActionStatusEl.className = 'status-message success';\n"
"                            globalActionStatusEl.style.display = 'block';\n"
"\n"
"                            setTimeout(() => {\n"
"                                if (globalActionStatusEl.textContent === successMsg && !globalActionStatusEl.className.includes('info')) { \n"
"                                    globalActionStatusEl.style.display = 'none';\n"
"                                    globalActionStatusEl.textContent = '';\n"
"                                    globalActionStatusEl.className = 'status-message';\n"
"                                }\n"
"                            }, 7000); \n"
"\n"
"                        } else if (portalStatus.last_action_status === 'ERROR') {\n"
"                            const errorMsgText = portalStatus.last_action_message || \"An unknown error occurred with \" + portalStatus.last_action_completed + \".\";\n"
"                            console.error(\"Action failed:\", errorMsgText);\n"
"                            if (globalActionStatusEl) {\n"
"                                globalActionStatusEl.textContent = `Status: ${errorMsgText}`;\n"
"                                globalActionStatusEl.className = 'status-message error';\n"
"                                globalActionStatusEl.style.display = 'block';\n"
"                                setTimeout(() => {\n"
"                                    if (globalActionStatusEl.className.includes('error')) {\n"
"                                        globalActionStatusEl.style.display = 'none';\n"
"                                        globalActionStatusEl.textContent = '';\n"
"                                        globalActionStatusEl.className = 'status-message';\n"
"                                    }\n"
"                                }, 10000); \n"
"                            }\n"
"                        }\n"
"                        lastProcessedAction = completedActionKey;\n"
"                    }\n"
"                } else {\n"
"                    if (globalActionStatusEl.className.includes('info') && globalActionStatusEl.textContent.startsWith('Processing:')) {\n"
"                    } \n"
"                }\n"
"            } else if (globalActionStatusEl && portalStatus === null) { \n"
"                 if (globalActionStatusEl.style.display !== 'none' && !globalActionStatusEl.className.includes('success') && !globalActionStatusEl.className.includes('error')){\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                 }\n"
"            }\n"
"\n"
"            // 2. Update WiFi Info\n"
"            if (data.wifi) {\n"
"                // Update WiFi networks list only if enough time has passed\n"
"                const currentTime = Date.now();\n"
"                if (currentTime - lastWifiUpdateTime >= WIFI_UPDATE_INTERVAL) {\n"
"                    _updateNetworksListUI(data.wifi.networks);\n"
"                    lastWifiUpdateTime = currentTime;\n"
"                }\n"
"                \n"
"                // Always update connection status\n"
"                const wifiStatusEl = document.getElementById('wifi-connection-status');\n"
"                if (wifiStatusEl) {\n"
"                    if (data.wifi.is_connected) {\n"
"                        wifiStatusEl.textContent = `Connected to ${data.wifi.connected_ssid} (${data.wifi.ip_address})`;\n"
"                    } else if (portalStatus && portalStatus.action_in_progress === 'SAVE_WIFI') {\n"
"                        wifiStatusEl.textContent = \"Attempting to connect...\";\n"
"                    } else {\n"
"                        wifiStatusEl.textContent = \"Not Connected\";\n"
"                    }\n"
"                }\n"
"            }\n"
"\n"
"            // 3. Update Device Config Info\n"
"            if (data.device_config) {\n"
"                _updateDeviceConfigUI(data.device_config);\n"
"            }\n"
"\n"
"            \n"
"            // 4a. Refresh card configuration periodically\n"
"            // Note: We refresh cards on successful completion of card-related actions\n"
"            if (portalStatus && portalStatus.last_action_completed && \n"
"                (portalStatus.last_action_completed.includes('CARD') || \n"
"                 portalStatus.last_action_status === 'SUCCESS')) {\n"
"                // Refresh card data when actions complete\n"
"                loadConfiguredCards();\n"
"            }\n"
"\n"
"            // 5. Update OTA Firmware Info & UI State\n"
"            if (data.ota) {\n"
"                updateOtaUI(data.ota, data.portal);\n"
"            }\n"
"\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error polling /api/status:', error);\n"
"            const globalActionStatusEl = document.getElementById('global-action-status');\n"
"            if(globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = 'Lost connection to device. Please check and refresh.';\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"            }\n"
"        });\n"
"}\n"
"\n"
"// Load current configuration - UI update part will be in pollApiStatus\n"
"function _updateDeviceConfigUI(config) {\n"
"    if (!initialDeviceConfigLoaded) {\n"
"        if (config.team_id !== undefined) {\n"
"            const teamIdField = document.getElementById('teamId');\n"
"            // Only set value if field exists and is empty\n"
"            if (teamIdField && !teamIdField.value) {\n"
"                teamIdField.value = config.team_id;\n"
"            }\n"
"        }\n"
"        if (config.api_key_display !== undefined) { \n"
"            const apiKeyField = document.getElementById('apiKey');\n"
"            // Only set value if field exists and is empty\n"
"            if (apiKeyField && !apiKeyField.value) {\n"
"                apiKeyField.value = config.api_key_display;\n"
"            }\n"
"        }\n"
"        if (config.region !== undefined) {\n"
"            // Handle region - set radio button or dropdown depending on UI\n"
"            const regionRadios = document.querySelectorAll('input[name=\"region\"]');\n"
"            regionRadios.forEach(radio => {\n"
"                if (radio.value === config.region) {\n"
"                    radio.checked = true;\n"
"                }\n"
"            });\n"
"            // Also handle dropdown if it exists\n"
"            const regionSelect = document.getElementById('region');\n"
"            if (regionSelect) {\n"
"                regionSelect.value = config.region;\n"
"            }\n"
"        }\n"
"        initialDeviceConfigLoaded = true;\n"
"    }\n"
"}\n"
"\n"
"// Initialize page\n"
"document.addEventListener('DOMContentLoaded', function() {\n"
"    const hash = window.location.hash.substr(1);\n"
"    if (hash && ['config-screen'].includes(hash)) {\n"
"        showScreen(hash);\n"
"    } else {\n"
"        showScreen('config-screen');\n"
"    }\n"
"\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"\n"
"    if (checkUpdateBtn) {\n"
"        checkUpdateBtn.addEventListener('click', requestCheckFirmwareUpdate);\n"
"    }\n"
"    if (installUpdateBtn) {\n"
"        installUpdateBtn.addEventListener('click', requestStartFirmwareUpdate);\n"
"    }\n"
"\n"
"    pollApiStatus();\n"
"    setInterval(pollApiStatus, 3000); // Poll every 3 seconds for responsiveness\n"
"\n"
"    const refreshBtn = document.getElementById('refresh-networks-btn');\n"
"    if(refreshBtn) {\n"
"        refreshBtn.addEventListener('click', requestScanNetworks);\n"
"    }\n"
"    \n"
"    // Initialize card management with a small delay to avoid overwhelming the device\n"
"    setTimeout(() => {\n"
"        loadCardDefinitions();\n"
"        setTimeout(() => {\n"
"            loadConfiguredCards();\n"
"        }, 500);\n"
"    }, 1000);\n"
"});\n"
"\n"
"// Enum for OtaManager::UpdateStatus::State (mirror from C++)\n"
"// This helps in making the JS code more readable when checking status.\n"
"const OTA_STATUS_STATE = {\n"
"    IDLE: 0,\n"
"    CHECKING_VERSION: 1,\n"
"    DOWNLOADING: 2,\n"
"    WRITING: 3,\n"
"    SUCCESS: 4,\n"
"    ERROR_WIFI: 5,\n"
"    ERROR_HTTP_CHECK: 6,\n"
"    ERROR_HTTP_DOWNLOAD: 7,\n"
"    ERROR_JSON: 8,\n"
"    ERROR_UPDATE_BEGIN: 9,\n"
"    ERROR_UPDATE_WRITE: 10,\n"
"    ERROR_UPDATE_END: 11,\n"
"    ERROR_NO_ASSET: 12,\n"
"    ERROR_NO_SPACE: 13\n"
"};\n"
"\n"
"function requestCheckFirmwareUpdate() {\n"
"    console.log(\"Requesting firmware update check...\");\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    if(checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"\n"
"    fetch('/api/actions/check-ota-update', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.status === 'initiated') {\n"
"                console.log('Firmware check initiated.');\n"
"            } else {\n"
"                console.error('Failed to initiate firmware check:', data.message);\n"
"                if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                const updateStatusTextEl = document.getElementById('update-status-text');\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = `${data.message || 'Could not start check.'}`;\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting firmware check:', error);\n"
"            if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            const updateStatusTextEl = document.getElementById('update-status-text');\n"
"            if(updateStatusTextEl) updateStatusTextEl.textContent = 'Communication error during check request.';\n"
"        });\n"
"}\n"
"\n"
"function requestStartFirmwareUpdate() {\n"
"    console.log(\"Requesting firmware update start...\");\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    if(installUpdateBtn) installUpdateBtn.disabled = true;\n"
"    if(checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"\n"
"    fetch('/api/actions/start-ota-update', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.status === 'initiated') {\n"
"                console.log('Firmware update process initiated.');\n"
"            } else {\n"
"                console.error('Failed to initiate firmware update:', data.message);\n"
"                if(installUpdateBtn) installUpdateBtn.disabled = false;\n"
"                if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                const updateStatusTextEl = document.getElementById('update-status-text');\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = `Error: ${data.message || 'Could not start update.'}`;\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting firmware update start:', error);\n"
"            if(installUpdateBtn) installUpdateBtn.disabled = false;\n"
"            if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            const updateStatusTextEl = document.getElementById('update-status-text');\n"
"            if(updateStatusTextEl) updateStatusTextEl.textContent = 'Communication error during update request.';\n"
"        });\n"
"}\n"
"\n"
"// Helper function to update OTA UI based on status from /api/status\n"
"function updateOtaUI(otaData, portalData) {\n"
"    const currentVersionEl = document.getElementById('current-version');\n"
"    const availableVersionEl = document.getElementById('available-version');\n"
"    const availableVersionContainerEl = document.getElementById('available-version-container');\n"
"    const releaseNotesEl = document.getElementById('release-notes');\n"
"    const updateAvailableSection = document.getElementById('update-available-section');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const updateStatusTextEl = document.getElementById('update-status-text');\n"
"    const updateErrorEl = document.getElementById('update-error-message');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const updateProgressContainer = document.getElementById('update-progress-container');\n"
"    const updateProgressBar = document.getElementById('update-progress-bar');\n"
"\n"
"    let portalOtaMessageDisplayed = false;\n"
"    if (portalData && portalData.portal_ota_action_message) {\n"
"        if (updateStatusTextEl) updateStatusTextEl.textContent = portalData.portal_ota_action_message;\n"
"        portalOtaMessageDisplayed = true;\n"
"        if (portalData.action_in_progress === 'CHECK_OTA_UPDATE' || portalData.action_in_progress === 'START_OTA_UPDATE') {\n"
"            if (checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"            if (installUpdateBtn) installUpdateBtn.disabled = true;\n"
"        } else {\n"
"        }\n"
"    }\n"
"\n"
"    if (currentVersionEl) currentVersionEl.textContent = otaData.current_firmware_version || 'N/A';\n"
"    \n"
"    if (availableVersionContainerEl && availableVersionEl) {\n"
"        if (otaData.update_available && otaData.available_version && otaData.available_version !== 'N/A') {\n"
"            availableVersionEl.textContent = otaData.available_version;\n"
"            availableVersionContainerEl.style.display = '';\n"
"        } else {\n"
"            availableVersionEl.textContent = 'N/A';\n"
"            availableVersionContainerEl.style.display = 'none';\n"
"        }\n"
"    }\n"
"\n"
"    if (releaseNotesEl) releaseNotesEl.textContent = otaData.update_available ? (otaData.release_notes || 'No release notes.') : '';\n"
"\n"
"    if (updateAvailableSection) updateAvailableSection.style.display = otaData.update_available ? 'block' : 'none';\n"
"    \n"
"    if (installUpdateBtn) {\n"
"        installUpdateBtn.disabled = !otaData.update_available || \n"
"                                  (portalData && (portalData.action_in_progress === 'START_OTA_UPDATE' || portalData.action_in_progress === 'CHECK_OTA_UPDATE')) ||\n"
"                                  otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || \n"
"                                  otaData.status_code === OTA_STATUS_STATE.WRITING;\n"
"    }\n"
"    \n"
"    if (checkUpdateBtn) {\n"
"        checkUpdateBtn.disabled = (portalData && (portalData.action_in_progress === 'CHECK_OTA_UPDATE' || portalData.action_in_progress === 'START_OTA_UPDATE')) ||\n"
"                                otaData.status_code === OTA_STATUS_STATE.CHECKING_VERSION || \n"
"                                otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || \n"
"                                otaData.status_code === OTA_STATUS_STATE.WRITING;\n"
"    }\n"
"\n"
"    if (!portalOtaMessageDisplayed || (portalData && portalData.portal_ota_action_message && portalData.portal_ota_action_message.includes(\"Successfully dispatched\"))) {\n"
"        if (updateStatusTextEl) {\n"
"            let displayMessage = otaData.status_message || 'Idle';\n"
"            if (portalOtaMessageDisplayed && otaData.status_message && otaData.status_message !== \"Idle\") {\n"
"                updateStatusTextEl.textContent = displayMessage;\n"
"            } else if (!portalOtaMessageDisplayed) {\n"
"                 updateStatusTextEl.textContent = displayMessage;\n"
"            }\n"
"        }\n"
"    }\n"
"    \n"
"    if (updateErrorEl) {\n"
"        updateErrorEl.textContent = otaData.error_message || '';\n"
"    }\n"
"\n"
"    if (otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || otaData.status_code === OTA_STATUS_STATE.WRITING) {\n"
"        if (updateProgressContainer) updateProgressContainer.style.display = 'block';\n"
"        if (updateProgressBar) updateProgressBar.style.width = `${otaData.progress || 0}%`;\n"
"    } else {\n"
"        if (otaData.status_code !== OTA_STATUS_STATE.SUCCESS && updateProgressContainer) {\n"
"        }\n"
"    }\n"
"    \n"
"    if (otaData.status_code === OTA_STATUS_STATE.SUCCESS) {\n"
"        if (updateStatusTextEl) updateStatusTextEl.textContent = otaData.status_message || 'Update successful! Device will reboot.';\n"
"        if (updateProgressBar) updateProgressBar.style.width = '100%';\n"
"        if (updateProgressContainer) updateProgressContainer.style.display = 'block';\n"
"        if (installUpdateBtn) installUpdateBtn.disabled = true;\n"
"        if (checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"    }\n"
"}\n"
"</script>\n"
"</head>\n"
"<body>\n"
"    <div class=\"header\">\n"
"        <h1 id=\"page-title\">Configure your DeskHog</h1>\n"
"    </div>\n"
"    \n"
"    <!-- Configuration Screen -->\n"
"    <div id=\"config-screen\">\n"
"        <div id=\"global-action-status\" class=\"status-message\" style=\"display:none; margin-bottom: 1em; padding: 0.75em; border-radius: 4px; text-align: center;\"></div>\n"
"        <h2>WiFi</h2>\n"
"        <div class=\"config-section\">\n"
"            \n"
"            <form id=\"wifi-form\" onsubmit=\"return saveWifiConfig()\">\n"
"                <div class=\"form-group\">\n"
"                    <select name=\"ssid\" id=\"ssid\" required>\n"
"                        <option value=\"\">Select a network</option>\n"
"                    </select>\n"
"                </div>\n"
"                \n"
"                <div class=\"form-group\">\n"
"                    <label for=\"password\">Password</label>\n"
"                    <input type=\"password\" name=\"password\" id=\"password\">\n"
"                </div>\n"
"\n"
"                <p class=\"tip\">If your network doesn't need a password, you can leave this blank.</p>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Save WiFi</button>\n"
"                </div>\n"
"            </form>\n"
"            \n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" id=\"refresh-networks-btn\">Refresh network list</button>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <h2>Welcome to DeskHog</h2>\n"
"        <div class=\"config-section\">\n"
"            <p>DeskHog is a tiny platform for having fun with code, hardware and the internet. Check out the <a href=\"https://github.com/posthog/deskhog/blob/main/README.md\" target=\"_blank\">readme</a> to get hacking, especially the <a href=\"https://github.com/posthog/deskhog/blob/main/tech-details.md\" target=\"_blank\">tech details file</a>.</p>\n"
"        </div>\n"
"        \n"
"        <h2>Add cards</h2>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <div id=\"available-cards-list\">\n"
"                <!-- Will be populated by JavaScript -->\n"
"                <p>Loading available card types...</p>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <h2>Manage cards</h2>\n"
"        <div class=\"config-section\">\n"
"            <div id=\"cards-list\">\n"
"                <!-- Will be populated by JavaScript -->\n"
"                <p>Loading cards...</p>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <!-- Firmware Update Section -->\n"
"        <h2>Firmware update</h2>\n"
"        <div class=\"config-section\" id=\"firmware-update-section\">\n"
"            <p>Current version: <span id=\"current-version\">Checking...</span></p>\n"
"            <p id=\"available-version-container\">Available version: <span id=\"available-version\">N/A</span></p>\n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" id=\"check-update-btn\">Check for updates</button>\n"
"            </div>\n"
"            <div id=\"update-available-section\" style=\"display:none;\">\n"
"                <h4>Update details:</h4>\n"
"                <pre id=\"release-notes\" class=\"release-notes-box\"></pre>\n"
"                <div class=\"button-container\">\n"
"                    <button type=\"button\" id=\"install-update-btn\">Install update</button>\n"
"                </div>\n"
"            </div>\n"
"            <div id=\"update-status-container\" style=\"margin-top: 15px;\">\n"
"                <p id=\"update-status-text\"></p>\n"
"                <div class=\"progress\" id=\"update-progress-container\" style=\"display:none;\">\n"
"                    <div id=\"update-progress-bar\" class=\"progress-bar\" style=\"width: 0%;\"></div>\n"
"                </div>\n"
"                <p id=\"update-error-message\" class=\"error-message\"></p>\n"
"            </div>\n"
"        </div>\n"
"        <!-- End Firmware Update Section -->\n"
"\n"
"    </div>\n"
"    \n"
"    <footer>People who are really serious about software should make their own hardware. - Alan Kay</footer>\n"
"\n"
"</body>\n"
"</html>";
